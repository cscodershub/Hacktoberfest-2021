// Boyer-Moore Majority Voting Algorithm to find the majority element among the given elements with more than N/ 2 occurrences. 

// Steps include 
// 1. find candiate element
// varify the occurenece
// O(N) time complexity


#include <bits/stdc++.h>
using namespace std;
 
int check(vector<int> &arr, int candidate){
    int count = 0, n = arr.size();
    // Checking if majority candidate occurs more than n times
    
    for (int i = 0; i < n; i++) {
        if (arr[i] == candidate)
            count++;
    }
 
    if (count > n / 2)
        return candidate;
    return -1;
}

// Function to find candidate
int findMajority(vector<int> &arr)
{
    int candidate = -1, count = 0, n = arr.size();
   
    for ( int i = 0; i < n; i++) {
        if (count == 0) {
            candidate = arr[i];
            count = 1;
        }
        else {
            if (arr[i] == candidate)
                count++;
            else
                count--;
        }
    }
    
    return check(arr, candidate);
}


int main()
{
    int n;
    cin >> n ;
    
    vector<int> arr(n,0);
    
    for(int i = 0 ; i < n ; i++){
        int x;
        cin >> x;
        arr[i] = x;
    }
        
    int majority = findMajority(arr);
    cout << " The majority element is : " << majority;
    return 0;
}
