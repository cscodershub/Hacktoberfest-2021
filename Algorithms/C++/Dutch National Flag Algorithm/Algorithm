 // As the mid element is traversing through the array once. Time complexity is of
//O(N).
 //  space complexity is O(1)
 
#include<bits/stdc++.h>  
using namespace std;  

void DNFA(vector<int> &arr)  
{  
    
    int low = 0, mid = 0;  
    int high = arr.size() - 1;  
      
    // Iterate till all the elements are sorted  
    while (mid <= high)  
    {  
     if( arr[mid] == 0)
        swap(arr[mid++],arr[low++]);
     
     else if( arr[mid] == 1)
        mid++;
        
     else if( arr[mid] == 2)
        swap(arr[mid],arr[high--]);
     
    }  
}  
  
// Function to print array  
void printArray(vector<int> arr)  
{  
    // Iterate and print every element 
    int arr_size = arr.size();
    for (int i = 0; i < arr_size; i++)  
        cout << arr[i] << " ";  
  
}  
  
// Driver Code  
int main()  
{  

    int n;
    cout<< "Enter the size of the array\n";
    cin >> n;
    
    vector<int> arr(n,0);
    
    cout<< "Enter the array elements\n";
    int i = 0;
    while(i < n)
    {
      cin>>arr[i++];
    }
      
    cout << "Array before running the algorithm: ";  
      
    printArray(arr);   
    
    DNFA(arr);  
  
    cout << "\nArray after DNFA algorithm: ";  
      
    printArray(arr);  
  
    return 0;  
}
